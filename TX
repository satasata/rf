#include <avr/io.h>
#include <stdio.h>
#define F_CPU 4000000UL
#include <util/delay.h>
#include <avr/interrupt.h>
#include "nrfasetukset.h"


#define dataLen 3 
uint8_t *data;
uint8_t *arr;

void InitSPI(void);
char WriteByteSPI(unsigned char cData);
void ioinit(void);
uint8_t GetReg(uint8_t reg);
uint8_t *WriteToNrf(uint8_t ReadWrite, uint8_t reg, uint8_t *val, uint8_t antVal);
void nrf24L01_init(void);
void ChangeAddress(uint8_t adress);
void reset(void);
void receive_payload(void);
void transmit_payload(uint8_t * W_buff);
void lahetys(void);



int main(void)
{
	InitSPI();
	nrf24L01_init();
	ioinit();
	
	while(1)
	{

		{
			reset();
			lahetys();
				if((GetReg(STATUS) & (1<<4)) == 0)
				{
					SETBIT(PORTB, 0);
					_delay_ms(500);
					CLEARBIT(PORTB, 0);
					_delay_ms(200);
				}
			
		}
		
		
		
	}

}


void InitSPI(void)
{
	DDRB |= (1<<DDB5) | (1<<DDB3) | (1<<DDB2) |(1<<DDB1);
	SPCR |= (1<<SPE)|(1<<MSTR) |(1<<SPR0) |(1<<SPR1);
	SETBIT(PORTB, 2);	
	CLEARBIT(PORTB, 1);
}

char WriteByteSPI(unsigned char cData)
{
	SPDR = cData;
	while(!(SPSR & (1<<SPIF)));
	return SPDR;
}


/*****************LED DDRB, 0 = 1***************************/
void ioinit(void)
{
	DDRB |= (1<<DDB0);
	
}

uint8_t GetReg(uint8_t reg)
{
	_delay_us(10);
	CLEARBIT(PORTB, 2);	
	_delay_us(10);
	WriteByteSPI(R_REGISTER + reg);
	_delay_us(10);
	reg = WriteByteSPI(NOP);	
	_delay_us(10);
	SETBIT(PORTB, 2);	
	return reg;	
}


uint8_t *WriteToNrf(uint8_t ReadWrite, uint8_t reg, uint8_t *val, uint8_t antVal)	
{

	if (ReadWrite == W)	
	{
		reg = W_REGISTER + reg;	
	}
	static uint8_t ret[dataLen];	
	_delay_us(10);	
	CLEARBIT(PORTB, 2);	
	_delay_us(10);
	WriteByteSPI(reg);	
	_delay_us(10);
	int i;
	for(i=0; i<antVal; i++)
	{
		if (ReadWrite == R && reg != W_TX_PAYLOAD)
		{
			ret[i]=WriteByteSPI(NOP);
			_delay_us(10);
		}
		else
		{
			WriteByteSPI(val[i]);	
			_delay_us(10);
		}
	}
	SETBIT(PORTB, 2);
	return ret;
}

void nrf24L01_init(void)
{
	_delay_ms(100);	
	uint8_t val[5];	
	
	val[0]=0x01;	
	WriteToNrf(W, EN_AA, val, 1);	
	
	val[0]=0x2F;	
	WriteToNrf(W, SETUP_RETR, val, 1);
	
	val[0]=0x01;
	WriteToNrf(W, EN_RXADDR, val, 1);
	
	val[0]=0x03;
	WriteToNrf(W, SETUP_AW, val, 1);
	
	val[0]=0x01;
	WriteToNrf(W, RF_CH, val, 1); 
	
	val[0]=0x07;
	WriteToNrf(W, RF_SETUP, val, 1); 
	
	int i;
	for(i=0; i<5; i++)
	{
		val[i]=0x12;
	}
	WriteToNrf(W, RX_ADDR_P0, val, 5);
	
	for(i=0; i<5; i++)
	{
		val[i]=0x12;
	}
	WriteToNrf(W, TX_ADDR, val, 5);
	
	val[0]=dataLen;
	WriteToNrf(W, RX_PW_P0, val, 1);
	
	val[0]=0x1F; 
	WriteToNrf(W, CONFIG, val, 1);
	
	_delay_ms(100);
	

}

void ChangeAddress(uint8_t adress)
{
	_delay_ms(100);
	uint8_t val[5];
	
	int i;
	for(i=0; i<5; i++)
	{
		val[i]=adress;
	}
	WriteToNrf(W, RX_ADDR_P0, val, 5);
	for(i=0; i<5; i++)
	{
		val[i]=adress;	
	}
	WriteToNrf(W, TX_ADDR, val, 5);
	_delay_ms(100);
}

void reset(void)
{
	_delay_us(10);
	CLEARBIT(PORTB, 2);
	_delay_us(10);
	WriteByteSPI(W_REGISTER + STATUS);
	_delay_us(10);
	WriteByteSPI(0b01110000);	
	_delay_us(10);
	SETBIT(PORTB, 2);
}

void receive_payload(void)
{

	SETBIT(PORTB, 1);	
	_delay_ms(1000);	
	CLEARBIT(PORTB, 1); 
}

void transmit_payload(uint8_t * W_buff)
{
	WriteToNrf(R, FLUSH_TX, W_buff, 0); 
	WriteToNrf(R, W_TX_PAYLOAD, W_buff, 5);

	
	_delay_ms(10);	
	SETBIT(PORTB, 1);
	_delay_us(20);	
	CLEARBIT(PORTB, 1);
	_delay_ms(10);
	
	
}

void lahetys(void)
{
	uint8_t W_Buffer[5];
	int i;
	for (i=0;i<5;i++)
	{
		W_Buffer[i]=0x93;
	}
	
	_delay_ms(1500);
	
	transmit_payload(W_Buffer);
	
}
